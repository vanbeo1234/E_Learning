{"ast":null,"code":"import { __awaiter, __generator } from '../node_modules/tslib/tslib.es6.js';\nimport { useState, useCallback } from 'react';\n\n/**\n * useClipboard Hook\n *\n * Provides functionality to copy text to the clipboard and track the copy status.\n *\n * @returns An object containing the copy function, copy status, and any error encountered.\n */\nvar useClipboard = function () {\n  var _a = useState(false),\n    isCopied = _a[0],\n    setIsCopied = _a[1];\n  var _b = useState(null),\n    error = _b[0],\n    setError = _b[1];\n  /**\n   * Copies the provided text to the clipboard.\n   *\n   * @param text - The text to be copied to the clipboard.\n   */\n  var copy = useCallback(function (text) {\n    return __awaiter(undefined, undefined, undefined, function () {\n      var _error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(navigator === null || navigator === undefined ? undefined : navigator.clipboard)) {\n              setError(new Error('Clipboard API is not available'));\n              return [2 /*return*/];\n            }\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, navigator.clipboard.writeText(text)];\n          case 2:\n            _a.sent();\n            setIsCopied(true);\n            setError(null);\n            // Reset the isCopied state after 2 seconds\n            setTimeout(function () {\n              return setIsCopied(false);\n            }, 2000);\n            return [3 /*break*/, 4];\n          case 3:\n            _error_1 = _a.sent();\n            setError(_error_1);\n            setIsCopied(false);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  }, []);\n  return {\n    copy: copy,\n    isCopied: isCopied,\n    error: error\n  };\n};\nexport { useClipboard };","map":{"version":3,"names":["useClipboard","_a","useState","isCopied","setIsCopied","_b","error","setError","copy","useCallback","text","__awaiter","undefined","navigator","clipboard","Error","writeText","sent","setTimeout","_error_1"],"sources":["C:\\CMC_UNI\\CMC_Global\\PROJECT\\E_Learning\\frontend\\node_modules\\@coreui\\react\\src\\hooks\\useClipboard.ts"],"sourcesContent":["import { useState, useCallback } from 'react'\n\n/**\n * useClipboard Hook\n *\n * Provides functionality to copy text to the clipboard and track the copy status.\n *\n * @returns An object containing the copy function, copy status, and any error encountered.\n */\nexport const useClipboard = () => {\n  const [isCopied, setIsCopied] = useState<boolean>(false)\n  const [error, setError] = useState<Error | null>(null)\n\n  /**\n   * Copies the provided text to the clipboard.\n   *\n   * @param text - The text to be copied to the clipboard.\n   */\n  const copy = useCallback(async (text: string) => {\n    if (!navigator?.clipboard) {\n      setError(new Error('Clipboard API is not available'))\n      return\n    }\n\n    try {\n      await navigator.clipboard.writeText(text)\n      setIsCopied(true)\n      setError(null)\n      // Reset the isCopied state after 2 seconds\n      setTimeout(() => setIsCopied(false), 2000)\n    } catch (_error) {\n      setError(_error as Error)\n      setIsCopied(false)\n    }\n  }, [])\n\n  return { copy, isCopied, error }\n}\n"],"mappings":";;;AAEA;;;;;;AAMG;AACU,IAAAA,YAAY,GAAG,SAAAA,CAAA;EACpB,IAAAC,EAAA,GAA0BC,QAAQ,CAAU,KAAK,CAAC;IAAjDC,QAAQ,GAAAF,EAAA;IAAEG,WAAW,GAAAH,EAAA,GAA4B;EAClD,IAAAI,EAAA,GAAoBH,QAAQ,CAAe,IAAI,CAAC;IAA/CI,KAAK,GAAAD,EAAA;IAAEE,QAAQ,GAAAF,EAAA,GAAgC;EAEtD;;;;AAIG;EACH,IAAMG,IAAI,GAAGC,WAAW,CAAC,UAAOC,IAAY;IAAA,OAAAC,SAAA,CAAAC,SAAA,EAAAA,SAAA,EAAAA,SAAA;;;;;YAC1C,IAAI,EAACC,SAAS,KAAT,QAAAA,SAAS,KAATD,SAAA,GAAAA,SAAA,GAAAC,SAAS,CAAEC,SAAS,GAAE;cACzBP,QAAQ,CAAC,IAAIQ,KAAK,CAAC,gCAAgC,CAAC,CAAC;cACrD,OAAM;;;;;YAIN,OAAM,cAAAF,SAAS,CAACC,SAAS,CAACE,SAAS,CAACN,IAAI,CAAC;;YAAzCT,EAAA,CAAAgB,IAAA,EAAyC;YACzCb,WAAW,CAAC,IAAI,CAAC;YACjBG,QAAQ,CAAC,IAAI,CAAC;;YAEdW,UAAU,CAAC;cAAM,OAAAd,WAAW,CAAC,KAAK,CAAC;YAAA,GAAE,IAAI,CAAC;;;;YAE1CG,QAAQ,CAACY,QAAe,CAAC;YACzBf,WAAW,CAAC,KAAK,CAAC;;;;;;;GAErB,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEI,IAAI,EAAAA,IAAA;IAAEL,QAAQ,EAAAA,QAAA;IAAEG,KAAK,EAAAA;EAAA,CAAE;AAClC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}