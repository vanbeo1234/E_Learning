{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nvar CCardImage = forwardRef(function (_a, ref) {\n  var children = _a.children,\n    _b = _a.as,\n    Component = _b === undefined ? 'img' : _b,\n    className = _a.className,\n    orientation = _a.orientation,\n    rest = __rest(_a, [\"children\", \"as\", \"className\", \"orientation\"]);\n  return React.createElement(Component, __assign({\n    className: classNames(orientation ? \"card-img-\".concat(orientation) : 'card-img', className)\n  }, rest, {\n    ref: ref\n  }), children);\n});\nCCardImage.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  orientation: PropTypes.oneOf(['top', 'bottom'])\n};\nCCardImage.displayName = 'CCardImage';\nexport { CCardImage };","map":{"version":3,"names":["CCardImage","forwardRef","_a","ref","children","_b","as","Component","undefined","className","orientation","rest","__rest","React","createElement","__assign","classNames","concat","propTypes","PropTypes","elementType","node","string","oneOf","displayName"],"sources":["C:\\CMC_UNI\\CMC_Global\\PROJECT\\E_Learning\\frontend\\node_modules\\@coreui\\react\\src\\components\\card\\CCardImage.tsx"],"sourcesContent":["import React, { ElementType, forwardRef, ImgHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardImageProps\n  extends ImgHTMLAttributes<HTMLImageElement | HTMLOrSVGElement | HTMLOrSVGImageElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Optionally orientate the image to the top, bottom, or make it overlaid across the card.\n   */\n  orientation?: 'top' | 'bottom'\n}\n\nexport const CCardImage: PolymorphicRefForwardingComponent<'img', CCardImageProps> = forwardRef<\n  HTMLImageElement | HTMLOrSVGElement | HTMLOrSVGImageElement,\n  CCardImageProps\n>(({ children, as: Component = 'img', className, orientation, ...rest }, ref) => {\n  return (\n    <Component\n      className={classNames(orientation ? `card-img-${orientation}` : 'card-img', className)}\n      {...rest}\n      ref={ref}\n    >\n      {children}\n    </Component>\n  )\n})\n\nCCardImage.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  orientation: PropTypes.oneOf(['top', 'bottom']),\n}\n\nCCardImage.displayName = 'CCardImage'\n"],"mappings":";;;;IAsBaA,UAAU,GAA8DC,UAAU,CAG7F,UAACC,EAAoE,EAAEC,GAAG;EAAvE,IAAAC,QAAQ,GAAAF,EAAA,CAAAE,QAAA;IAAEC,EAAA,GAAAH,EAAA,CAAAI,EAAqB;IAAjBC,SAAS,GAAAF,EAAA,KAAAG,SAAA,GAAG,KAAK,GAAAH,EAAA;IAAEI,SAAS,GAAAP,EAAA,CAAAO,SAAA;IAAEC,WAAW,GAAAR,EAAA,CAAAQ,WAAA;IAAKC,IAAI,GAAAC,MAAA,CAAAV,EAAA,EAAlE,8CAAoE,CAAF;EACnE,OACEW,KAAA,CAAAC,aAAA,CAACP,SAAS,EAAAQ,QAAA;IACRN,SAAS,EAAEO,UAAU,CAACN,WAAW,GAAG,YAAAO,MAAA,CAAYP,WAAW,CAAE,GAAG,UAAU,EAAED,SAAS;EAAC,GAClFE,IAAI;IACRR,GAAG,EAAEA;EAAG,IAEPC,QAAQ,CACC;AAEhB,CAAC;AAEDJ,UAAU,CAACkB,SAAS,GAAG;EACrBZ,EAAE,EAAEa,SAAS,CAACC,WAAW;EACzBhB,QAAQ,EAAEe,SAAS,CAACE,IAAI;EACxBZ,SAAS,EAAEU,SAAS,CAACG,MAAM;EAC3BZ,WAAW,EAAES,SAAS,CAACI,KAAK,CAAC,CAAC,KAAK,EAAE,QAAQ,CAAC;CAC/C;AAEDvB,UAAU,CAACwB,WAAW,GAAG,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}