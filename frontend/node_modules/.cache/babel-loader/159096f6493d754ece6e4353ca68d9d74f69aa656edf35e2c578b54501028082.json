{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nvar CListGroup = forwardRef(function (_a, ref) {\n  var _b;\n  var children = _a.children,\n    _c = _a.as,\n    Component = _c === undefined ? 'ul' : _c,\n    className = _a.className,\n    flush = _a.flush,\n    layout = _a.layout,\n    rest = __rest(_a, [\"children\", \"as\", \"className\", \"flush\", \"layout\"]);\n  return React.createElement(Component, __assign({\n    className: classNames('list-group', (_b = {\n      'list-group-flush': flush\n    }, _b[\"list-group-\".concat(layout)] = layout, _b), className)\n  }, rest, {\n    ref: ref\n  }), children);\n});\nCListGroup.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  flush: PropTypes.bool,\n  layout: PropTypes.oneOf(['horizontal', 'horizontal-sm', 'horizontal-md', 'horizontal-lg', 'horizontal-xl', 'horizontal-xxl'])\n};\nCListGroup.displayName = 'CListGroup';\nexport { CListGroup };","map":{"version":3,"names":["CListGroup","forwardRef","_a","ref","children","_c","as","Component","undefined","className","flush","layout","rest","__rest","React","createElement","__assign","classNames","_b","concat","propTypes","PropTypes","elementType","node","string","bool","oneOf","displayName"],"sources":["C:\\CMC_UNI\\CMC_Global\\PROJECT\\E_Learning\\frontend\\node_modules\\@coreui\\react\\src\\components\\list-group\\CListGroup.tsx"],"sourcesContent":["import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CListGroupProps extends HTMLAttributes<HTMLDivElement | HTMLUListElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Remove some borders and rounded corners to render list group items edge-to-edge in a parent component (e.g., `<CCard>`).\n   */\n  flush?: boolean\n  /**\n   * Specify a layout type.\n   */\n  layout?:\n    | 'horizontal'\n    | 'horizontal-sm'\n    | 'horizontal-md'\n    | 'horizontal-lg'\n    | 'horizontal-xl'\n    | 'horizontal-xxl'\n}\n\nexport const CListGroup: PolymorphicRefForwardingComponent<'ul', CListGroupProps> = forwardRef<\n  HTMLDivElement | HTMLUListElement,\n  CListGroupProps\n>(({ children, as: Component = 'ul', className, flush, layout, ...rest }, ref) => {\n  return (\n    <Component\n      className={classNames(\n        'list-group',\n        {\n          'list-group-flush': flush,\n          [`list-group-${layout}`]: layout,\n        },\n        className,\n      )}\n      {...rest}\n      ref={ref}\n    >\n      {children}\n    </Component>\n  )\n})\n\nCListGroup.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  flush: PropTypes.bool,\n  layout: PropTypes.oneOf([\n    'horizontal',\n    'horizontal-sm',\n    'horizontal-md',\n    'horizontal-lg',\n    'horizontal-xl',\n    'horizontal-xxl',\n  ]),\n}\n\nCListGroup.displayName = 'CListGroup'\n"],"mappings":";;;;IA+BaA,UAAU,GAA6DC,UAAU,CAG5F,UAACC,EAAqE,EAAEC,GAAG;;EAAxE,IAAAC,QAAQ,GAAAF,EAAA,CAAAE,QAAA;IAAEC,EAAA,GAAAH,EAAA,CAAAI,EAAoB;IAAhBC,SAAS,GAAAF,EAAA,KAAAG,SAAA,GAAG,IAAI,GAAAH,EAAA;IAAEI,SAAS,GAAAP,EAAA,CAAAO,SAAA;IAAEC,KAAK,GAAAR,EAAA,CAAAQ,KAAA;IAAEC,MAAM,GAAAT,EAAA,CAAAS,MAAA;IAAKC,IAAI,GAAnEC,MAAA,CAAAX,EAAA,oDAAqE,CAAF;EACpE,OACEY,KAAA,CAAAC,aAAA,CAACR,SAAS,EAAAS,QAAA;IACRP,SAAS,EAAEQ,UAAU,CACnB,YAAY,GAAAC,EAAA;MAEV,kBAAkB,EAAER;OACpBQ,EAAA,CAAC,aAAc,CAAAC,MAAA,CAAAR,MAAM,CAAE,IAAGA,MAAM,E,KAElCF,SAAS;EACV,CACG,EAAAG,IAAI,EACR;IAAAT,GAAG,EAAEA;EAAG,CAEP,GAAAC,QAAQ,CACC;AAEhB,CAAC;AAEDJ,UAAU,CAACoB,SAAS,GAAG;EACrBd,EAAE,EAAEe,SAAS,CAACC,WAAW;EACzBlB,QAAQ,EAAEiB,SAAS,CAACE,IAAI;EACxBd,SAAS,EAAEY,SAAS,CAACG,MAAM;EAC3Bd,KAAK,EAAEW,SAAS,CAACI,IAAI;EACrBd,MAAM,EAAEU,SAAS,CAACK,KAAK,CAAC,CACtB,YAAY,EACZ,eAAe,EACf,eAAe,EACf,eAAe,EACf,eAAe,EACf,gBAAgB,CACjB;CACF;AAED1B,UAAU,CAAC2B,WAAW,GAAG,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}