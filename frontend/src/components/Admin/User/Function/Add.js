import React, { useState } from 'react';
import '../../Style/adum.css';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import axios from 'axios';

// T·∫°o instance axios v·ªõi c·∫•u h√¨nh c∆° b·∫£n
const api = axios.create({
  baseURL: 'http://localhost:8081/v1/api',
});

// Interceptor ƒë·ªÉ th√™m token v√†o m·ªçi y√™u c·∫ßu
api.interceptors.request.use((config) => {
  const token = localStorage.getItem('token'); // S·ª≠ d·ª•ng key 'token' nh∆∞ m√£ c≈©
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

// Interceptor ƒë·ªÉ x·ª≠ l√Ω l·ªói token
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 400 && error.response?.data?.errorStatus === 907) {
      toast.error('Token kh√¥ng h·ª£p l·ªá. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
      localStorage.removeItem('token');
      window.location.href = '/login'; // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p
    }
    return Promise.reject(error);
  }
);

const AddUserModal = ({
  formData,
  setFormData,
  handleAddUser, // H√†m n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi l·∫°i t·ª´ UserManagement
  setAddModalOpen,
  availableCertificates,
  addCertificate,
  removeCertificate,
}) => {
  const [errors, setErrors] = useState({});
  const [selectedCertificate, setSelectedCertificate] = useState('');

  // H√†m chuy·ªÉn ƒë·ªïi ng√†y sang ƒë·ªãnh d·∫°ng ISO (YYYY-MM-DD) ƒë·ªÉ g·ª≠i API
  const convertToISODate = (inputDate) => {
    if (!inputDate) return '';
    const date = new Date(inputDate);
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  };

  // H√†m x√°c th·ª±c form tr∆∞·ªõc khi g·ª≠i
  const validateForm = () => {
    const newErrors = {};
    if (!formData.id?.trim()) newErrors.id = 'M√£ ƒë·ªãnh danh l√† b·∫Øt bu·ªôc';
    if (!formData.name?.trim()) newErrors.name = 'H·ªç v√† t√™n l√† b·∫Øt bu·ªôc';

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!formData.email?.trim()) {
      newErrors.email = 'Email l√† b·∫Øt bu·ªôc';
    } else if (!emailRegex.test(formData.email)) {
      newErrors.email = 'Email kh√¥ng h·ª£p l·ªá';
    }

    if (!formData.password) {
      newErrors.password = 'M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc';
    } else if (formData.password.length < 6) {
      newErrors.password = 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±';
    }

    if (!formData.confirmPassword) {
      newErrors.confirmPassword = 'X√°c nh·∫≠n m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc';
    } else if (formData.confirmPassword !== formData.password) {
      newErrors.confirmPassword = 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp';
    }

    if (!formData.gender) newErrors.gender = 'Gi·ªõi t√≠nh l√† b·∫Øt bu·ªôc';
    if (!formData.status) newErrors.status = 'Tr·∫°ng th√°i l√† b·∫Øt bu·ªôc';

    if (!formData.dob) {
      newErrors.dob = 'Ng√†y sinh l√† b·∫Øt bu·ªôc';
    } else if (new Date(formData.dob) > new Date()) {
      newErrors.dob = 'Ng√†y sinh kh√¥ng th·ªÉ l√† ng√†y trong t∆∞∆°ng lai';
    }

    if (!formData.role) newErrors.role = 'Vai tr√≤ l√† b·∫Øt bu·ªôc';

    const phoneRegex = /^[0-9]{9,15}$/;
    if (!formData.phone?.trim()) {
      newErrors.phone = 'S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc';
    } else if (!phoneRegex.test(formData.phone)) {
      newErrors.phone = 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá (9-15 ch·ªØ s·ªë)';
    }

    if (!formData.phoneCode) newErrors.phoneCode = 'M√£ v√πng ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc';
    if (!formData.address?.trim()) newErrors.address = 'ƒê·ªãa ch·ªâ l√† b·∫Øt bu·ªôc';

    if (formData.role === 'Gi·∫£ng vi√™n') {
      if (formData.experience === '' || formData.experience === null || formData.experience === undefined) {
        newErrors.experience = 'NƒÉm kinh nghi·ªám l√† b·∫Øt bu·ªôc';
      }
      if (!formData.certifications?.length) {
        newErrors.certifications = 'Ph·∫£i ch·ªçn √≠t nh·∫•t m·ªôt ch·ª©ng ch·ªâ';
      }
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // H√†m x√°c th·ª±c d·ªØ li·ªáu sau khi th√™m th√†nh c√¥ng
  const validateResponseData = (responseData, sentData) => {
    const errors = [];
    // Ki·ªÉm tra c√°c tr∆∞·ªùng quan tr·ªçng
    if (responseData.data?.userCode !== sentData.userCode) {
      errors.push(`M√£ ƒë·ªãnh danh tr·∫£ v·ªÅ (${responseData.data?.userCode}) kh√¥ng kh·ªõp v·ªõi m√£ g·ª≠i (${sentData.userCode}).`);
    }
    if (responseData.data?.email !== sentData.email) {
      errors.push(`Email tr·∫£ v·ªÅ (${responseData.data?.email}) kh√¥ng kh·ªõp v·ªõi email g·ª≠i (${sentData.email}).`);
    }
    if (responseData.data?.roleId !== sentData.roleId) {
      errors.push(`Vai tr√≤ tr·∫£ v·ªÅ (${responseData.data?.roleId}) kh√¥ng kh·ªõp v·ªõi vai tr√≤ g·ª≠i (${sentData.roleId}).`);
    }
    if (responseData.data?.statusCode !== sentData.statusCode) {
      errors.push(`Tr·∫°ng th√°i tr·∫£ v·ªÅ (${responseData.data?.statusCode}) kh√¥ng kh·ªõp v·ªõi tr·∫°ng th√°i g·ª≠i (${sentData.statusCode}).`);
    }
    return errors;
  };

  // X·ª≠ l√Ω thay ƒë·ªïi s·ªë ƒëi·ªán tho·∫°i (ch·ªâ cho ph√©p s·ªë, t·ªëi ƒëa 15 ch·ªØ s·ªë)
  const handlePhoneChange = (e) => {
    const value = e.target.value.replace(/[^0-9]/g, '').slice(0, 15);
    setFormData({ ...formData, phone: value });
  };

  // X·ª≠ l√Ω thay ƒë·ªïi nƒÉm kinh nghi·ªám
  const handleExperienceChange = (e) => {
    const value = e.target.value;
    setFormData({ ...formData, experience: value === '' ? '' : Number(value) });
  };

  // X·ª≠ l√Ω ch·ªçn ch·ª©ng ch·ªâ
  const handleCertificateChange = (e) => {
    const value = e.target.value;
    setSelectedCertificate(value);
    if (value) {
      addCertificate(value);
      setSelectedCertificate('');
    }
  };

  // X·ª≠ l√Ω g·ª≠i form
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (validateForm()) {
      try {
        const token = localStorage.getItem('token'); // Ki·ªÉm tra token
        if (!token) {
          toast.error('Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ ti·∫øp t·ª•c.');
          return;
        }

        const roleId = formData.role === 'Gi·∫£ng vi√™n' ? 2 : formData.role === 'H·ªçc vi√™n' ? 3 : 1;
        const body = {
          userCode: formData.id,
          name: formData.name,
          email: formData.email,
          password: formData.password,
          confirmPassword: formData.confirmPassword || formData.password,
          gender: formData.gender === 'Nam' ? 1 : 0,
          dateOfBirth: convertToISODate(formData.dob),
          address: formData.address,
          phone: `${formData.phoneCode}${formData.phone}`,
          roleId: roleId,
          statusCode: formData.status === 'Ho·∫°t ƒë·ªông' ? 'ACTIVE' : 'INACTIVE',
          certification: formData.certifications.join(','),
          ...(roleId === 1 ? { createdBy: 'admin' } : {}),
          ...(roleId === 2 ? { experience: formData.experience } : {}),
        };

        const { data } = await api.post('/auth/register', body);
        console.warn('üßæ Registration response:\n', JSON.stringify(data, null, 2));

        if (data.errorStatus === 900) {
          // X√°c th·ª±c d·ªØ li·ªáu tr·∫£ v·ªÅ
          const validationErrors = validateResponseData(data, body);
          if (validationErrors.length > 0) {
            toast.warn(`Th√™m ng∆∞·ªùi d√πng th√†nh c√¥ng nh∆∞ng c√≥ l·ªói d·ªØ li·ªáu: ${validationErrors.join(' ')}`);
          } else {
            const roleName = formData.role === 'Gi·∫£ng vi√™n' ? 'Gi·∫£ng vi√™n' : formData.role === 'H·ªçc vi√™n' ? 'H·ªçc vi√™n' : 'Qu·∫£n l√Ω';
            toast.success(`ƒê√£ th√™m ${roleName} [${formData.id}] th√†nh c√¥ng!`);
          }
          setAddModalOpen(false);
          handleReset();
          handleAddUser(); // G·ªçi h√†m t·ª´ UserManagement ƒë·ªÉ l√†m m·ªõi danh s√°ch
        } else {
          toast.error(data.message || 'ƒêƒÉng k√Ω th·∫•t b·∫°i!');
        }
      } catch (err) {
        console.error('Error in handleAddUser:', err);
        toast.error('L·ªói m·∫°ng ho·∫∑c server. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    }
  };

  // Reset form
  const handleReset = () => {
    setFormData({
      id: '',
      name: '',
      email: '',
      password: '',
      confirmPassword: '',
      phone: '',
      phoneCode: '+84',
      gender: '',
      status: 'Ho·∫°t ƒë·ªông',
      dob: '',
      role: '',
      address: '',
      certifications: [],
      experience: 0,
    });
    setErrors({});
    setSelectedCertificate('');
  };

  return (
    <div id="addModal" className="modal add-modal">
      <div className="modal-content">
        <span className="modal-close-btn" onClick={() => setAddModalOpen(false)}>√ó</span>
        <h2 className="modal-h2">Th√™m ng∆∞·ªùi d√πng m·ªõi</h2>
        <form className="modal-form" onSubmit={handleSubmit}>
          <div className="modal-grid">
            <div className="modal-grid-item">
              <label className="field-label" title="M√£ ƒë·ªãnh danh duy nh·∫•t cho ng∆∞·ªùi d√πng">
                M√£ ƒë·ªãnh danh:
              </label>
              <input
                type="text"
                name="id"
                value={formData.id || ''}
                onChange={(e) => setFormData({ ...formData, id: e.target.value })}
                required
              />
              {errors.id && <span className="error">{errors.id}</span>}
            </div>

            <div className="modal-grid-item">
              <label className="field-label" title="H·ªç v√† t√™n ƒë·∫ßy ƒë·ªß c·ªßa ng∆∞·ªùi d√πng">
                H·ªç v√† t√™n:
              </label>
              <input
                type="text"
                name="name"
                value={formData.name || ''}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                required
              />
              {errors.name && <span className="error">{errors.name}</span>}
            </div>

            <div className="modal-grid-item">
              <label className="field-label" title="M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±">
                M·∫≠t kh·∫©u:
              </label>
              <input
                type="password"
                name="password"
                value={formData.password || ''}
                onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                required
              />
              {errors.password && <span className="error">{errors.password}</span>}
            </div>

            <div className="modal-grid-item">
              <label className="field-label" title="X√°c nh·∫≠n m·∫≠t kh·∫©u ph·∫£i kh·ªõp v·ªõi m·∫≠t kh·∫©u">
                X√°c nh·∫≠n m·∫≠t kh·∫©u:
              </label>
              <input
                type="password"
                name="confirmPassword"
                value={formData.confirmPassword || ''}
                onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}
                required
              />
              {errors.confirmPassword && <span className="error">{errors.confirmPassword}</span>}
            </div>

            <div className="modal-grid-item">
              <label className="field-label" title="Email h·ª£p l·ªá ƒë·ªÉ li√™n h·ªá">
                Email:
              </label>
              <input
                type="email"
                name="email"
                value={formData.email || ''}
                onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                required
              />
              {errors.email && <span className="error">{errors.email}</span>}
            </div>

            <div className="modal-grid-item full-width">
              <label className="field-label" title="S·ªë ƒëi·ªán tho·∫°i t·ª´ 9-15 ch·ªØ s·ªë">
                S·ªë ƒëi·ªán tho·∫°i:
              </label>
              <div className="phone-input-group">
                <select
                  className="phone-code-select"
                  value={formData.phoneCode || '+84'}
                  onChange={(e) => setFormData({ ...formData, phoneCode: e.target.value })}
                  required
                >
                  <option value="+84">+84</option>
                  <option value="+1">+1</option>
                  <option value="+44">+44</option>
                  <option value="+61">+61</option>
                  <option value="+81">+81</option>
                  <option value="+49">+49</option>
                  <option value="+33">+33</option>
                  <option value="+91">+91</option>
                </select>
                <input
                  type="text"
                  name="phone"
                  className="phone-number-input"
                  value={formData.phone || ''}
                  onChange={handlePhoneChange}
                  required
                />
              </div>
              {errors.phone && <span className="error">{errors.phone}</span>}
              {errors.phoneCode && <span className="error">{errors.phoneCode}</span>}
            </div>

            <div className="modal-grid-item horizontal-field">
              <label className="field-label" title="Ch·ªçn gi·ªõi t√≠nh c·ªßa ng∆∞·ªùi d√πng">
                Gi·ªõi t√≠nh:
              </label>
              <div className="inline-options">
                <label>
                  <input
                    type="radio"
                    name="gender"
                    value="Nam"
                    checked={formData.gender === 'Nam'}
                    onChange={(e) => setFormData({ ...formData, gender: e.target.value })}
                    required
                  />
                  Nam
                </label>
                <label>
                  <input
                    type="radio"
                    name="gender"
                    value="N·ªØ"
                    checked={formData.gender === 'N·ªØ'}
                    onChange={(e) => setFormData({ ...formData, gender: e.target.value })}
                    required
                  />
                  N·ªØ
                </label>
              </div>
              {errors.gender && <span className="error">{errors.gender}</span>}
            </div>

            <div className="modal-grid-item horizontal-field">
              <label className="field-label" title="Tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa ng∆∞·ªùi d√πng">
                Tr·∫°ng th√°i:
              </label>
              <div className="inline-options">
                <label>
                  <input
                    type="radio"
                    name="status"
                    value="Ho·∫°t ƒë·ªông"
                    checked={formData.status === 'Ho·∫°t ƒë·ªông'}
                    onChange={(e) => setFormData({ ...formData, status: e.target.value })}
                    required
                  />
                  Ho·∫°t ƒë·ªông
                </label>
                <label>
                  <input
                    type="radio"
                    name="status"
                    value="Kh√¥ng ho·∫°t ƒë·ªông"
                    checked={formData.status === 'Kh√¥ng ho·∫°t ƒë·ªông'}
                    onChange={(e) => setFormData({ ...formData, status: e.target.value })}
                    required
                  />
                  Kh√¥ng ho·∫°t ƒë·ªông
                </label>
              </div>
              {errors.status && <span className="error">{errors.status}</span>}
            </div>

            <div className="modal-grid-item">
              <label className="field-label" title="Vai tr√≤ c·ªßa ng∆∞·ªùi d√πng trong h·ªá th·ªëng">
                Vai tr√≤:
              </label>
              <select
                name="role"
                value={formData.role || ''}
                onChange={(e) => setFormData({ ...formData, role: e.target.value })}
                required
              >
                <option value="">-- Ch·ªçn vai tr√≤ --</option>
                <option value="H·ªçc vi√™n">H·ªçc vi√™n</option>
                <option value="Gi·∫£ng vi√™n">Gi·∫£ng vi√™n</option>
                <option value="Qu·∫£n l√Ω">Qu·∫£n l√Ω</option>
              </select>
              {errors.role && <span className="error">{errors.role}</span>}
            </div>

            <div className="modal-grid-item">
              <label className="field-label" title="Ng√†y sinh kh√¥ng th·ªÉ l√† ng√†y trong t∆∞∆°ng lai">
                Ng√†y sinh:
              </label>
              <input
                type="date"
                name="dob"
                value={formData.dob || ''}
                onChange={(e) => setFormData({ ...formData, dob: e.target.value })}
                required
              />
              {errors.dob && <span className="error">{errors.dob}</span>}
            </div>

            <div className="modal-grid-item">
              <label className="field-label" title="ƒê·ªãa ch·ªâ hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng">
                ƒê·ªãa ch·ªâ:
              </label>
              <input
                type="text"
                name="address"
                value={formData.address || ''}
                onChange={(e) => setFormData({ ...formData, address: e.target.value })}
                required
              />
              {errors.address && <span className="error">{errors.address}</span>}
            </div>

            {formData.role === 'Gi·∫£ng vi√™n' && (
              <>
                <div className="modal-grid-item">
                  <label className="field-label" title="Ch·ªçn c√°c ch·ª©ng ch·ªâ c·ªßa gi·∫£ng vi√™n">
                    Ch·ª©ng ch·ªâ:
                  </label>
                  <div className="certifications">
                    <select
                      value={selectedCertificate}
                      onChange={handleCertificateChange}
                    >
                      <option value="" disabled>Ch·ªçn ch·ª©ng ch·ªâ</option>
                      {availableCertificates.map((cert, i) => (
                        <option
                          key={i}
                          value={cert}
                          disabled={formData.certifications.includes(cert)}
                        >
                          {cert}
                        </option>
                      ))}
                    </select>
                    <div className="certificate-list">
                      {formData.certifications?.map((cert, idx) => (
                        <div key={idx} className="certificate-item">
                          {cert}
                          <button type="button" onClick={() => removeCertificate(cert)}>x</button>
                        </div>
                      ))}
                    </div>
                    {errors.certifications && <span className="error">{errors.certifications}</span>}
                  </div>
                </div>

                <div className="modal-grid-item">
                  <label className="field-label" title="S·ªë nƒÉm kinh nghi·ªám gi·∫£ng d·∫°y">
                    NƒÉm kinh nghi·ªám:
                  </label>
                  <select
                    name="experience"
                    value={formData.experience ?? ''}
                    onChange={handleExperienceChange}
                    required
                  >
                    <option value="">-- Ch·ªçn s·ªë nƒÉm --</option>
                    {[...Array(20).keys()].map((year) => (
                      <option key={year} value={year}>{year}</option>
                    ))}
                  </select>
                  {errors.experience && <span className="error">{errors.experience}</span>}
                </div>
              </>
            )}
          </div>

          <div className="modal-buttons">
            <button type="submit" className="modal-button-submit">Th√™m</button>
            <button type="button" className="modal-button-reset" onClick={handleReset}>Reset</button>
            <button type="button" className="modal-button-reset" onClick={() => setAddModalOpen(false)}>H·ªßy</button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddUserModal;