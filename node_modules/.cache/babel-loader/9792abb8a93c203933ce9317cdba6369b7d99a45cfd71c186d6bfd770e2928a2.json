{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CAccordionItemContext } from './CAccordionItem.js';\nvar CAccordionButton = forwardRef(function (_a, ref) {\n  var children = _a.children,\n    className = _a.className,\n    rest = __rest(_a, [\"children\", \"className\"]);\n  var _b = useContext(CAccordionItemContext),\n    id = _b.id,\n    visible = _b.visible,\n    setVisible = _b.setVisible;\n  return React.createElement(\"button\", __assign({\n    type: \"button\",\n    className: classNames('accordion-button', {\n      collapsed: !visible\n    }, className),\n    \"aria-controls\": id,\n    \"aria-expanded\": visible,\n    onClick: function () {\n      return setVisible(!visible);\n    }\n  }, rest, {\n    ref: ref\n  }), children);\n});\nCAccordionButton.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string\n};\nCAccordionButton.displayName = 'CAccordionButton';\nexport { CAccordionButton };","map":{"version":3,"names":["CAccordionButton","forwardRef","_a","ref","children","className","rest","__rest","_b","useContext","CAccordionItemContext","id","visible","setVisible","React","createElement","__assign","type","classNames","collapsed","onClick","propTypes","PropTypes","node","string","displayName"],"sources":["C:\\Users\\nqminh7\\Downloads\\Hoanthien\\E_Learning\\node_modules\\@coreui\\react\\src\\components\\accordion\\CAccordionButton.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CAccordionItemContext } from './CAccordionItem'\n\nexport interface CAccordionButtonProps extends HTMLAttributes<HTMLButtonElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CAccordionButton = forwardRef<HTMLButtonElement, CAccordionButtonProps>(\n  ({ children, className, ...rest }, ref) => {\n    const { id, visible, setVisible } = useContext(CAccordionItemContext)\n\n    return (\n      <button\n        type=\"button\"\n        className={classNames('accordion-button', { collapsed: !visible }, className)}\n        aria-controls={id}\n        aria-expanded={visible}\n        onClick={() => setVisible(!visible)}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </button>\n    )\n  },\n)\n\nCAccordionButton.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCAccordionButton.displayName = 'CAccordionButton'\n"],"mappings":";;;;;IAaaA,gBAAgB,GAAGC,UAAU,CACxC,UAACC,EAAgC,EAAEC,GAAG;EAAnC,IAAAC,QAAQ,GAAAF,EAAA,CAAAE,QAAA;IAAEC,SAAS,GAAAH,EAAA,CAAAG,SAAA;IAAKC,IAAI,GAA9BC,MAAA,CAAAL,EAAA,2BAAgC,CAAF;EACvB,IAAAM,EAA8B,GAAAC,UAAU,CAACC,qBAAqB,CAAC;IAA7DC,EAAE,GAAAH,EAAA,CAAAG,EAAA;IAAEC,OAAO,GAAAJ,EAAA,CAAAI,OAAA;IAAEC,UAAU,GAAAL,EAAA,CAAAK,UAAsC;EAErE,OACEC,KAAA,CAAAC,aAAA,WAAAC,QAAA;IACEC,IAAI,EAAC,QAAQ;IACbZ,SAAS,EAAEa,UAAU,CAAC,kBAAkB,EAAE;MAAEC,SAAS,EAAE,CAACP;IAAO,CAAE,EAAEP,SAAS,CAAC;IAC9D,iBAAAM,EAAE;IAAA,iBACFC,OAAO;IACtBQ,OAAO,EAAE,SAAAA,CAAA;MAAM,OAAAP,UAAU,CAAC,CAACD,OAAO,CAAC;IAAA;EAAA,CAC/B,EAAAN,IAAI;IACRH,GAAG,EAAEA;EAAG,CAEP,GAAAC,QAAQ,CACF;AAEb,CAAC;AAGHJ,gBAAgB,CAACqB,SAAS,GAAG;EAC3BjB,QAAQ,EAAEkB,SAAS,CAACC,IAAI;EACxBlB,SAAS,EAAEiB,SAAS,CAACE;CACtB;AAEDxB,gBAAgB,CAACyB,WAAW,GAAG,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}