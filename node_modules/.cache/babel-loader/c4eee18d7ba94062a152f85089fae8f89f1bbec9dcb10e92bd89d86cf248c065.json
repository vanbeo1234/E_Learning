{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CButton } from '../button/CButton.js';\nimport { CDropdownContext } from './CDropdown.js';\nimport { triggerPropType } from '../../props.js';\nvar CDropdownToggle = function (_a) {\n  var children = _a.children,\n    _b = _a.caret,\n    caret = _b === undefined ? true : _b,\n    custom = _a.custom,\n    className = _a.className,\n    _c = _a.navLink,\n    navLink = _c === undefined ? true : _c,\n    split = _a.split,\n    _d = _a.trigger,\n    trigger = _d === undefined ? 'click' : _d,\n    rest = __rest(_a, [\"children\", \"caret\", \"custom\", \"className\", \"navLink\", \"split\", \"trigger\"]);\n  var _e = useContext(CDropdownContext),\n    dropdownToggleRef = _e.dropdownToggleRef,\n    variant = _e.variant,\n    visible = _e.visible,\n    setVisible = _e.setVisible;\n  var triggers = __assign(__assign({}, (trigger === 'click' || trigger.includes('click')) && {\n    onClick: function (event) {\n      event.preventDefault();\n      setVisible(!visible);\n    }\n  }), (trigger === 'focus' || trigger.includes('focus')) && {\n    onFocus: function () {\n      return setVisible(true);\n    },\n    onBlur: function () {\n      return setVisible(false);\n    }\n  });\n  var togglerProps = __assign({\n    className: classNames({\n      'nav-link': variant === 'nav-item' && navLink,\n      'dropdown-toggle': caret,\n      'dropdown-toggle-split': split,\n      show: visible\n    }, className),\n    'aria-expanded': visible\n  }, !rest.disabled && __assign({}, triggers));\n  var Toggler = function () {\n    if (custom && React.isValidElement(children)) {\n      return React.createElement(React.Fragment, null, React.cloneElement(children, __assign(__assign({\n        'aria-expanded': visible\n      }, !rest.disabled && __assign({}, triggers)), {\n        ref: dropdownToggleRef\n      })));\n    }\n    if (variant === 'nav-item' && navLink) {\n      return React.createElement(\"a\", __assign({\n        href: \"#\"\n      }, togglerProps, {\n        role: \"button\"\n      }, rest, {\n        ref: dropdownToggleRef\n      }), children);\n    }\n    return React.createElement(CButton, __assign({}, togglerProps, {\n      tabIndex: 0\n    }, rest, {\n      ref: dropdownToggleRef\n    }), children, split && React.createElement(\"span\", {\n      className: \"visually-hidden\"\n    }, \"Toggle Dropdown\"));\n  };\n  return React.createElement(Toggler, null);\n};\nCDropdownToggle.propTypes = {\n  caret: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  custom: PropTypes.bool,\n  split: PropTypes.bool,\n  trigger: triggerPropType\n};\nCDropdownToggle.displayName = 'CDropdownToggle';\nexport { CDropdownToggle };","map":{"version":3,"names":["CDropdownToggle","_a","children","_b","caret","undefined","custom","className","_c","navLink","split","_d","trigger","rest","__rest","_e","useContext","CDropdownContext","dropdownToggleRef","variant","visible","setVisible","triggers","__assign","includes","onClick","event","preventDefault","onFocus","onBlur","togglerProps","classNames","show","disabled","Toggler","React","isValidElement","createElement","Fragment","cloneElement","ref","href","role","CButton","tabIndex","propTypes","PropTypes","bool","node","string","triggerPropType","displayName"],"sources":["C:\\Users\\nqminh7\\Downloads\\Hoanthien\\E_Learning\\node_modules\\@coreui\\react\\src\\components\\dropdown\\CDropdownToggle.tsx"],"sourcesContent":["import React, { FC, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CButton, CButtonProps } from '../button/CButton'\n\nimport { CDropdownContext } from './CDropdown'\n\nimport { triggerPropType } from '../../props'\nimport type { Triggers } from '../../types'\n\nexport interface CDropdownToggleProps extends Omit<CButtonProps, 'type'> {\n  /**\n   * Enables pseudo element caret on toggler.\n   */\n  caret?: boolean\n  /**\n   * Create a custom toggler which accepts any content.\n   */\n  custom?: boolean\n  /**\n   * If a dropdown `variant` is set to `nav-item` then render the toggler as a link instead of a button.\n   *\n   * @since 5.0.0\n   */\n  navLink?: boolean\n  /**\n   * Similarly, create split button dropdowns with virtually the same markup as single button dropdowns, but with the addition of `.dropdown-toggle-split` className for proper spacing around the dropdown caret.\n   */\n  split?: boolean\n  /**\n   * Sets which event handlers youâ€™d like provided to your toggle prop. You can specify one trigger or an array of them.\n   *\n   * @type 'hover' | 'focus' | 'click'\n   */\n  trigger?: Triggers | Triggers[]\n}\n\nexport const CDropdownToggle: FC<CDropdownToggleProps> = ({\n  children,\n  caret = true,\n  custom,\n  className,\n  navLink = true,\n  split,\n  trigger = 'click',\n  ...rest\n}) => {\n  const { dropdownToggleRef, variant, visible, setVisible } = useContext(CDropdownContext)\n\n  const triggers = {\n    ...((trigger === 'click' || trigger.includes('click')) && {\n      onClick: (event: React.MouseEvent<HTMLElement>) => {\n        event.preventDefault()\n        setVisible(!visible)\n      },\n    }),\n    ...((trigger === 'focus' || trigger.includes('focus')) && {\n      onFocus: () => setVisible(true),\n      onBlur: () => setVisible(false),\n    }),\n  }\n\n  const togglerProps = {\n    className: classNames(\n      {\n        'nav-link': variant === 'nav-item' && navLink,\n        'dropdown-toggle': caret,\n        'dropdown-toggle-split': split,\n        show: visible,\n      },\n      className,\n    ),\n    'aria-expanded': visible,\n    ...(!rest.disabled && { ...triggers }),\n  }\n\n  const Toggler = () => {\n    if (custom && React.isValidElement(children)) {\n      return (\n        <>\n          {React.cloneElement(children as React.ReactElement<any>, {\n            'aria-expanded': visible,\n            ...(!rest.disabled && { ...triggers }),\n            ref: dropdownToggleRef,\n          })}\n        </>\n      )\n    }\n\n    if (variant === 'nav-item' && navLink) {\n      return (\n        <a href=\"#\" {...togglerProps} role=\"button\" {...rest} ref={dropdownToggleRef}>\n          {children}\n        </a>\n      )\n    }\n\n    return (\n      <CButton {...togglerProps} tabIndex={0} {...rest} ref={dropdownToggleRef}>\n        {children}\n        {split && <span className=\"visually-hidden\">Toggle Dropdown</span>}\n      </CButton>\n    )\n  }\n\n  return <Toggler />\n}\n\nCDropdownToggle.propTypes = {\n  caret: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  custom: PropTypes.bool,\n  split: PropTypes.bool,\n  trigger: triggerPropType,\n}\n\nCDropdownToggle.displayName = 'CDropdownToggle'\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}